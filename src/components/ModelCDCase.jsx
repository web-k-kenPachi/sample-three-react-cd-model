/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 compressed.glb --transform
Files: compressed.glb [238.43KB] > /Users/kk/MyDocuments/06_work/Webproduct/meloemo-lp/dev-env/compressed-transformed.glb [242.35KB] (-2%)
*/

import { useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { useThree } from '@react-three/fiber';

export const ModelCDCase = ({ ...props }) => {
  const group = useRef();
  const { nodes, materials } = useGLTF('./model/model-cd-case.glb');

  let camera = useThree((state) => state.camera);
  let fov = camera.fov;

  if (window.innerWidth <= 767) {
    // console.log('mobile');

    fov = 150 / window.innerWidth;
    camera.fov = fov * 70;
  } else {
    // console.log('pc');

    fov = window.innerHeight / window.innerWidth;
    camera.fov = fov * 70;
  }

  camera.updateProjectionMatrix();

  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.cdCase_closed_shell_down.geometry}
        material={materials.pla}
        position={[0, -0.1, -0.023]}
      />
      <mesh
        geometry={nodes.cdCase_closed_shell_up.geometry}
        material={materials.glass}
        position={[0, -0.1, -0.023]}
      />
      <mesh
        geometry={nodes.cdCase_closed_poster.geometry}
        material={materials.cdCase_closed_poster_Mat}
        position={[0, -0.1, -0.03]}
      />
    </group>
  );
};

useGLTF.preload('./model/model-cd-case.glb');
